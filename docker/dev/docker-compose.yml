version: '3.8'

services:
  core_db_main:
    container_name: mysql_core_main_db_dev
    build:
      context: .
      dockerfile: ./docker/dev/image/mysql_main/Dockerfile
      args:
        mysql_root_user: ${MYSQL_ROOT_USER_MAIN}
        mysql_root_password: ${MYSQL_ROOT_PASSWORD_MAIN}
        mysql_database: ${MYSQL_DATABASE_MAIN}
        mysql_user: ${MYSQL_USER_MAIN}
        mysql_password: ${MYSQL_PASSWORD_MAIN}
        mysql_port: ${MYSQL_PORT_MAIN}
        mysql_conn: ${MYSQL_CONN_MAIN}
        mysql_replication_user: ${MYSQL_REPLICATION_USER}
        mysql_replication_password: ${MYSQL_REPLICATION_PASSWORD}
    restart: unless-stopped
    volumes:
      - core_data_main:/var/lib/mysql
    ports:
      - ${MYSQL_PORT_MAIN}:3306
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          '${MYSQL_HOST_MAIN}',
          '-u',
          '${MYSQL_USER_MAIN}',
          '--password=${MYSQL_PASSWORD_MAIN}',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s

  core_db_worker:
    container_name: mysql_core_worker_db_dev
    build:
      context: .
      dockerfile: ./docker/dev/image/mysql_worker/Dockerfile
      args:
        mysql_root_user: ${MYSQL_ROOT_USER_WORKER}
        mysql_root_password: ${MYSQL_ROOT_PASSWORD_WORKER}
        mysql_database: ${MYSQL_DATABASE_WORKER}
        mysql_user: ${MYSQL_USER_WORKER}
        mysql_password: ${MYSQL_PASSWORD_WORKER}
        mysql_port: ${MYSQL_PORT_WORKER}
        mysql_conn: ${MYSQL_CONN_WORKER}
        mysql_master_database: ${MYSQL_MASTER_DATABASE}
        mysql_master_database_host: ${MYSQL_MASTER_DATABASE_HOST}
        mysql_master_database_user: ${MYSQL_MASTER_DATABASE_USER}
        mysql_master_database_password: ${MYSQL_MASTER_DATABASE_PASSWORD}
        mysql_master_replication_user: ${MYSQL_MASTER_REPLICATION_USER}
        mysql_master_replication_password: ${MYSQL_MASTER_REPLICATION_PASSWORD}
    restart: unless-stopped
    depends_on:
      core_db_main:
        condition: service_healthy
    volumes:
      - core_data_worker:/var/lib/mysql
    ports:
      - ${MYSQL_PORT_WORKER}:3306
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          '${MYSQL_HOST_WORKER}',
          '-u',
          '${MYSQL_USER_WORKER}',
          '--password=${MYSQL_PASSWORD_WORKER}',
        ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s

  core_db_admin:
    container_name: phpmyadmin_core_db_dev
    build:
      context: .
      dockerfile: ./docker/dev/image/phpmyadmin/Dockerfile
      args:
        mysql_root_password: ${MYSQL_ROOT_PASSWORD_MAIN}
        phpmyadmin_port: ${PHPMYADMIN_PORT}
        phpmyadmin_pma_hosts: core_db_main,core_db_worker
        phpmyadmin_pma_port: 3306
        phpmyadmin_pma_arbitrary: 0
    restart: unless-stopped
    depends_on:
      core_db_main:
        condition: service_healthy
    ports:
      - '127.0.0.1:${PHPMYADMIN_PORT}:80'

  cache-db:
    container_name: redis_cache_db_dev
    build:
      context: .
      dockerfile: ./docker/dev/image/redis/Dockerfile
      args:
        redis_server_pass: ${REDIS_SERVER_PASS}
        redis_client_user: ${REDIS_CLIENT_USER}
        redis_client_pass: ${REDIS_CLIENT_PASS}
        redis_port: ${REDIS_PORT}
        redis_host: ${REDIS_HOST}
        redis_conn: ${REDIS_CONN}
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    volumes:
      - cache_data:/data

  cache_db_commander:
    container_name: redis-commander_cache_db_dev
    build:
      context: .
      dockerfile: ./docker/dev/image/redis-commander/Dockerfile
      args:
        port: 8081
        redis_client_pass: ${REDIS_SERVER_PASS}
        redis_client_port: 6379
        redis_client_host: cache-db
        redis_client_db_index: ${REDIS_DB}
    restart: unless-stopped
    ports:
      - 8081:8081
    depends_on:
      cache-db:
        condition: service_healthy

volumes:
  core_data_main:
  core_data_worker:
  cache_data:
